require('make-promises-safe')

const Jimp = require('jimp')
const { encode } = require('blurhash')
const glob = require('glob')
const fs = require('fs')
const createHash = require('crypto').createHash
const dataFilePath = require.resolve('../data/blurhashes')
const blurhashes = require(dataFilePath)
const oldBlurhashes = JSON.parse(JSON.stringify(blurhashes))

const getImageData = image => {
  const canvas = document.createElement('canvas')
  canvas.width = image.width
  canvas.height = image.height
  const context = canvas.getContext('2d')
  context.drawImage(image, 0, 0)
  return context.getImageData(0, 0, image.width, image.height)
}

async function main() {
  const files = glob.sync('.vuepress/public/uploads/*.{jpg,png}')
  for (const file of files) {
    const url = file.replace('.vuepress/public', '')
    const buffer = fs.readFileSync(file)
    const fileHash = createHash('sha256')
      .update(buffer)
      .digest('base64')

    let existingEntry = blurhashes[url]
    if (existingEntry && existingEntry.fileHash === fileHash) {
      continue
    }

    const image = (await Jimp.read(buffer)).resize(32, 32)
    const { data, width, height } = image.bitmap
    const blurhash = encode(data, width, height, 4, 3)
    blurhashes[url] = { fileHash, blurhash }
    console.log(fileHash, blurhash, url)
  }

  if (JSON.stringify(oldBlurhashes) !== JSON.stringify(blurhashes)) {
    fs.writeFileSync(
      dataFilePath,
      [
        '// Auto-generated by ' + process.argv.slice(0, 2).join(' '),
        '// prettier-ignore',
        'module.exports = ' + JSON.stringify(blurhashes, null, 2)
      ].join('\n')
    )
  }
}

main()
